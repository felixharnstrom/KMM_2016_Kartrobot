
Styrenhet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000038  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000134  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000ff  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000157  00000000  00000000  000003cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000054  00000000  00000000  00000528  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000165  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000028  00000000  00000000  000006e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	12 d0       	rcall	.+36     	; 0xbe <main>
  9a:	20 c0       	rjmp	.+64     	; 0xdc <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <uart_init>:
// function to receive data
unsigned char uart_recieve (void)
{
	while(!(UCSR0A) & (1<<RXC0));                   // wait while data is being received
	return UDR0;                                   // return 8-bit data
}
  9e:	10 92 c5 00 	sts	0x00C5, r1
  a2:	83 e3       	ldi	r24, 0x33	; 51
  a4:	80 93 c4 00 	sts	0x00C4, r24
  a8:	e1 ec       	ldi	r30, 0xC1	; 193
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	88 61       	ori	r24, 0x18	; 24
  b0:	80 83       	st	Z, r24
  b2:	e2 ec       	ldi	r30, 0xC2	; 194
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8e 60       	ori	r24, 0x0E	; 14
  ba:	80 83       	st	Z, r24
  bc:	08 95       	ret

000000be <main>:

int main(void)
{
	unsigned char a;
	char buffer[10];
	DDRA = (1<<DDA7)|(1<<DDA6)|(1<<DDA5)|(1<<DDA4)|(1<<DDA3)|(1<<DDA2)|(1<<DDA1)|(1<<DDA0);	//All pins on port A as output
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	81 b9       	out	0x01, r24	; 1
	uart_init();
  c2:	ed df       	rcall	.-38     	; 0x9e <uart_init>
}

// function to receive data
unsigned char uart_recieve (void)
{
	while(!(UCSR0A) & (1<<RXC0));                   // wait while data is being received
  c4:	a0 ec       	ldi	r26, 0xC0	; 192
  c6:	b0 e0       	ldi	r27, 0x00	; 0
	return UDR0;                                   // return 8-bit data
  c8:	e6 ec       	ldi	r30, 0xC6	; 198
  ca:	f0 e0       	ldi	r31, 0x00	; 0
}

// function to receive data
unsigned char uart_recieve (void)
{
	while(!(UCSR0A) & (1<<RXC0));                   // wait while data is being received
  cc:	8c 91       	ld	r24, X
	return UDR0;                                   // return 8-bit data
  ce:	80 81       	ld	r24, Z
	DDRA = (1<<DDA7)|(1<<DDA6)|(1<<DDA5)|(1<<DDA4)|(1<<DDA3)|(1<<DDA2)|(1<<DDA1)|(1<<DDA0);	//All pins on port A as output
	uart_init();
    while(1)
    {
		a=uart_recieve();
		if(a == 'a'){
  d0:	81 36       	cpi	r24, 0x61	; 97
  d2:	11 f4       	brne	.+4      	; 0xd8 <main+0x1a>
			PORTA |= (1<<PORTA5);    //Turn 6th bit on PORTA (i.e. PA5) to 1 => on
  d4:	15 9a       	sbi	0x02, 5	; 2
  d6:	fa cf       	rjmp	.-12     	; 0xcc <main+0xe>
			//_delay_ms(1000);        //Delay for 1000ms => 1 sec
		}else{
			PORTA &= ~(1<<PORTA5);    //Turn 6th bit on PORTA (i.e. PA5) to 0 => off
  d8:	15 98       	cbi	0x02, 5	; 2
  da:	f8 cf       	rjmp	.-16     	; 0xcc <main+0xe>

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
