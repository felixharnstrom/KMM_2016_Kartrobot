
Styrenhet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000158  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000040  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001eb  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000171  00000000  00000000  00000407  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001b3  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000088  00000000  00000000  0000072c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000017d  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000fe  00000000  00000000  00000931  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000a2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	22 d0       	rcall	.+68     	; 0xde <main>
  9a:	5c c0       	rjmp	.+184    	; 0x154 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <uart_init>:
	while(i < 8){
		a = uart_receive();
		buffer[i] = a;
		i++;
	}
}
  9e:	10 92 c5 00 	sts	0x00C5, r1
  a2:	83 e3       	ldi	r24, 0x33	; 51
  a4:	80 93 c4 00 	sts	0x00C4, r24
  a8:	e1 ec       	ldi	r30, 0xC1	; 193
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	88 61       	ori	r24, 0x18	; 24
  b0:	80 83       	st	Z, r24
  b2:	e2 ec       	ldi	r30, 0xC2	; 194
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8e 60       	ori	r24, 0x0E	; 14
  ba:	80 83       	st	Z, r24
  bc:	08 95       	ret

000000be <uart_transmit>:
  be:	e0 ec       	ldi	r30, 0xC0	; 192
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	90 81       	ld	r25, Z
  c4:	95 ff       	sbrs	r25, 5
  c6:	fd cf       	rjmp	.-6      	; 0xc2 <uart_transmit+0x4>
  c8:	80 93 c6 00 	sts	0x00C6, r24
  cc:	08 95       	ret

000000ce <uart_receive>:
  ce:	e0 ec       	ldi	r30, 0xC0	; 192
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	88 23       	and	r24, r24
  d6:	ec f7       	brge	.-6      	; 0xd2 <uart_receive+0x4>
  d8:	80 91 c6 00 	lds	r24, 0x00C6
  dc:	08 95       	ret

000000de <main>:

int main(void)
{
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	60 97       	sbiw	r28, 0x10	; 16
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	f8 94       	cli
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	cd bf       	out	0x3d, r28	; 61
	char c;
	int packet[8];
	//DDRA = (1<<DDA7)|(1<<DDA6)|(1<<DDA5)|(1<<DDA4)|(1<<DDA3)|(1<<DDA2)|(1<<DDA1)|(1<<DDA0);	//All pins on port A as output
	uart_init();
  f2:	d5 df       	rcall	.-86     	; 0x9e <uart_init>
  f4:	ce 01       	movw	r24, r28
  f6:	01 96       	adiw	r24, 0x01	; 1
  f8:	7c 01       	movw	r14, r24
    while(1)
    {
		c = uart_receive();
		uart_transmit('R');
			for (int i = 0; i < 8; ++i) {
  fa:	c1 2c       	mov	r12, r1
  fc:	d1 2c       	mov	r13, r1
	int packet[8];
	//DDRA = (1<<DDA7)|(1<<DDA6)|(1<<DDA5)|(1<<DDA4)|(1<<DDA3)|(1<<DDA2)|(1<<DDA1)|(1<<DDA0);	//All pins on port A as output
	uart_init();
    while(1)
    {
		c = uart_receive();
  fe:	e7 df       	rcall	.-50     	; 0xce <uart_receive>
 100:	18 2f       	mov	r17, r24
		uart_transmit('R');
 102:	82 e5       	ldi	r24, 0x52	; 82
 104:	dc df       	rcall	.-72     	; 0xbe <uart_transmit>
 106:	f7 01       	movw	r30, r14
			for (int i = 0; i < 8; ++i) {
 108:	2c 2d       	mov	r18, r12
 10a:	3d 2d       	mov	r19, r13
				packet[i] = (c >> i) & 1;
 10c:	81 2f       	mov	r24, r17
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	ac 01       	movw	r20, r24
 112:	02 2e       	mov	r0, r18
 114:	02 c0       	rjmp	.+4      	; 0x11a <main+0x3c>
 116:	55 95       	asr	r21
 118:	47 95       	ror	r20
 11a:	0a 94       	dec	r0
 11c:	e2 f7       	brpl	.-8      	; 0x116 <main+0x38>
 11e:	41 70       	andi	r20, 0x01	; 1
 120:	55 27       	eor	r21, r21
 122:	41 93       	st	Z+, r20
 124:	51 93       	st	Z+, r21
	uart_init();
    while(1)
    {
		c = uart_receive();
		uart_transmit('R');
			for (int i = 0; i < 8; ++i) {
 126:	2f 5f       	subi	r18, 0xFF	; 255
 128:	3f 4f       	sbci	r19, 0xFF	; 255
 12a:	28 30       	cpi	r18, 0x08	; 8
 12c:	31 05       	cpc	r19, r1
 12e:	81 f7       	brne	.-32     	; 0x110 <main+0x32>
 130:	8e 01       	movw	r16, r28
 132:	0f 5e       	subi	r16, 0xEF	; 239
 134:	1f 4f       	sbci	r17, 0xFF	; 255
				packet[i] = (c >> i) & 1;
			}
			for (int i = 7; i >= 0; --i) {
				if(packet[i] == 1){
 136:	f8 01       	movw	r30, r16
 138:	92 91       	ld	r25, -Z
 13a:	82 91       	ld	r24, -Z
 13c:	8f 01       	movw	r16, r30
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	19 f4       	brne	.+6      	; 0x148 <main+0x6a>
					uart_transmit('1');
 142:	81 e3       	ldi	r24, 0x31	; 49
 144:	bc df       	rcall	.-136    	; 0xbe <uart_transmit>
 146:	02 c0       	rjmp	.+4      	; 0x14c <main+0x6e>
					}else{
					uart_transmit('0');
 148:	80 e3       	ldi	r24, 0x30	; 48
 14a:	b9 df       	rcall	.-142    	; 0xbe <uart_transmit>
		c = uart_receive();
		uart_transmit('R');
			for (int i = 0; i < 8; ++i) {
				packet[i] = (c >> i) & 1;
			}
			for (int i = 7; i >= 0; --i) {
 14c:	0e 15       	cp	r16, r14
 14e:	1f 05       	cpc	r17, r15
 150:	91 f7       	brne	.-28     	; 0x136 <main+0x58>
 152:	d5 cf       	rjmp	.-86     	; 0xfe <main+0x20>

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
