
Styrenhet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000176  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000001ca  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000058  00000000  00000000  000001fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000028d  00000000  00000000  00000252  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001e0  00000000  00000000  000004df  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001c2  00000000  00000000  000006bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  0000009c  00000000  00000000  00000884  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000018e  00000000  00000000  00000920  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000124  00000000  00000000  00000aae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000038  00000000  00000000  00000bd2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	6b c0       	rjmp	.+214    	; 0x172 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#define PACKET_SIZE 8   // define packet size
#endif

#include "uart.h"

int main(void){
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
  a6:	60 97       	sbiw	r28, 0x10	; 16
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	f8 94       	cli
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	cd bf       	out	0x3d, r28	; 61
	int packet[8];
	uart_init();
  b2:	1a d0       	rcall	.+52     	; 0xe8 <uart_init>
    while(1){
	    uart_packet_receive(PACKET_SIZE, packet);   // receive a packet
  b4:	ce 01       	movw	r24, r28
  b6:	01 96       	adiw	r24, 0x01	; 1
  b8:	6c 01       	movw	r12, r24
  ba:	b6 01       	movw	r22, r12
  bc:	88 e0       	ldi	r24, 0x08	; 8
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	33 d0       	rcall	.+102    	; 0x128 <uart_packet_receive>
  c2:	8e 01       	movw	r16, r28
  c4:	0f 5e       	subi	r16, 0xEF	; 239
  c6:	1f 4f       	sbci	r17, 0xFF	; 255
  c8:	76 01       	movw	r14, r12
        // reply with the bit pattern of the packet
	    for(int i = 7; i >= 0; --i){
		    if(packet[i] == 1){
  ca:	f8 01       	movw	r30, r16
  cc:	92 91       	ld	r25, -Z
  ce:	82 91       	ld	r24, -Z
  d0:	8f 01       	movw	r16, r30
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	19 f4       	brne	.+6      	; 0xdc <main+0x3e>
			    uart_transmit('1');
  d6:	81 e3       	ldi	r24, 0x31	; 49
  d8:	17 d0       	rcall	.+46     	; 0x108 <uart_transmit>
  da:	02 c0       	rjmp	.+4      	; 0xe0 <main+0x42>
			    }else{
			    uart_transmit('0');
  dc:	80 e3       	ldi	r24, 0x30	; 48
  de:	14 d0       	rcall	.+40     	; 0x108 <uart_transmit>
	int packet[8];
	uart_init();
    while(1){
	    uart_packet_receive(PACKET_SIZE, packet);   // receive a packet
        // reply with the bit pattern of the packet
	    for(int i = 7; i >= 0; --i){
  e0:	0e 15       	cp	r16, r14
  e2:	1f 05       	cpc	r17, r15
  e4:	91 f7       	brne	.-28     	; 0xca <main+0x2c>
  e6:	e9 cf       	rjmp	.-46     	; 0xba <main+0x1c>

000000e8 <uart_init>:
#ifndef BAUDRATE
#define BAUDRATE ((F_CPU)/(BAUD*16UL)-1)    // set baud rate value for UBRR
#endif

void uart_init (void){
	UBRR0H = (BAUDRATE>>8);             // shift the register right by 8 bits
  e8:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = BAUDRATE;                  // set baud rate
  ec:	83 e3       	ldi	r24, 0x33	; 51
  ee:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B|= (1<<TXEN0)|(1<<RXEN0);     // enable receiver and transmitter
  f2:	e1 ec       	ldi	r30, 0xC1	; 193
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	88 61       	ori	r24, 0x18	; 24
  fa:	80 83       	st	Z, r24
	UCSR0C|= (1<<USBS0)|(3<<UCSZ00);    // 8bit data format
  fc:	e2 ec       	ldi	r30, 0xC2	; 194
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	8e 60       	ori	r24, 0x0E	; 14
 104:	80 83       	st	Z, r24
 106:	08 95       	ret

00000108 <uart_transmit>:
}

void uart_transmit (unsigned char c){
	loop_until_bit_is_set(UCSR0A, UDRE0);   // wait until data register empty
 108:	e0 ec       	ldi	r30, 0xC0	; 192
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	90 81       	ld	r25, Z
 10e:	95 ff       	sbrs	r25, 5
 110:	fd cf       	rjmp	.-6      	; 0x10c <uart_transmit+0x4>
	UDR0 = c;
 112:	80 93 c6 00 	sts	0x00C6, r24
 116:	08 95       	ret

00000118 <uart_receive>:
}

unsigned char uart_receive (void){
	loop_until_bit_is_set(UCSR0A, RXC0);    // Wait until data exists
 118:	e0 ec       	ldi	r30, 0xC0	; 192
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	88 23       	and	r24, r24
 120:	ec f7       	brge	.-6      	; 0x11c <uart_receive+0x4>
	return UDR0;
 122:	80 91 c6 00 	lds	r24, 0x00C6
}
 126:	08 95       	ret

00000128 <uart_packet_receive>:

void uart_packet_receive (int size, int* packet){
 128:	0f 93       	push	r16
 12a:	1f 93       	push	r17
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	ec 01       	movw	r28, r24
 132:	06 2f       	mov	r16, r22
 134:	17 2f       	mov	r17, r23
	char c;
	c = uart_receive();
 136:	f0 df       	rcall	.-32     	; 0x118 <uart_receive>
	for(int i = 0; i < size; ++i){
 138:	1c 16       	cp	r1, r28
 13a:	1d 06       	cpc	r1, r29
 13c:	ac f4       	brge	.+42     	; 0x168 <uart_packet_receive+0x40>
 13e:	e0 2f       	mov	r30, r16
 140:	f1 2f       	mov	r31, r17
 142:	20 e0       	ldi	r18, 0x00	; 0
 144:	30 e0       	ldi	r19, 0x00	; 0
		packet[i] = (c >> i) & 1;
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	ac 01       	movw	r20, r24
 14a:	02 2e       	mov	r0, r18
 14c:	02 c0       	rjmp	.+4      	; 0x152 <uart_packet_receive+0x2a>
 14e:	55 95       	asr	r21
 150:	47 95       	ror	r20
 152:	0a 94       	dec	r0
 154:	e2 f7       	brpl	.-8      	; 0x14e <uart_packet_receive+0x26>
 156:	41 70       	andi	r20, 0x01	; 1
 158:	55 27       	eor	r21, r21
 15a:	41 93       	st	Z+, r20
 15c:	51 93       	st	Z+, r21
}

void uart_packet_receive (int size, int* packet){
	char c;
	c = uart_receive();
	for(int i = 0; i < size; ++i){
 15e:	2f 5f       	subi	r18, 0xFF	; 255
 160:	3f 4f       	sbci	r19, 0xFF	; 255
 162:	2c 17       	cp	r18, r28
 164:	3d 07       	cpc	r19, r29
 166:	81 f7       	brne	.-32     	; 0x148 <uart_packet_receive+0x20>
		packet[i] = (c >> i) & 1;
	}
}
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	1f 91       	pop	r17
 16e:	0f 91       	pop	r16
 170:	08 95       	ret

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
