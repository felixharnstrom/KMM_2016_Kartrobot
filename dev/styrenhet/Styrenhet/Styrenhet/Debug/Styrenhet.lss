
Styrenhet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000016c  000001e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000060  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000032b  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000209  00000000  00000000  000005a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000210  00000000  00000000  000007ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000bc  00000000  00000000  000009bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001d4  00000000  00000000  00000a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000224  00000000  00000000  00000c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  00000e70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e6       	ldi	r30, 0x6C	; 108
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	59 c0       	rjmp	.+178    	; 0x168 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:
#endif

#include "uart.h"

int main(void){
	uart_init();
  b8:	0a d0       	rcall	.+20     	; 0xce <uart_init>
    while(1){
        uart_receive();
  ba:	21 d0       	rcall	.+66     	; 0xfe <uart_receive>
        uart_msg_transmit(0, 6, MOTOR, "bcdefg");   // sends "abcdefg"
  bc:	20 e0       	ldi	r18, 0x00	; 0
  be:	31 e0       	ldi	r19, 0x01	; 1
  c0:	41 e0       	ldi	r20, 0x01	; 1
  c2:	66 e0       	ldi	r22, 0x06	; 6
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	21 d0       	rcall	.+66     	; 0x10e <uart_msg_transmit>
  cc:	f6 cf       	rjmp	.-20     	; 0xba <main+0x2>

000000ce <uart_init>:
	char c;
	c = uart_receive();
	for(int i = 0; i < size; ++i){
		packet[i] = (c >> i) & 1;
	}
}
  ce:	10 92 c5 00 	sts	0x00C5, r1
  d2:	83 e3       	ldi	r24, 0x33	; 51
  d4:	80 93 c4 00 	sts	0x00C4, r24
  d8:	e1 ec       	ldi	r30, 0xC1	; 193
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	88 61       	ori	r24, 0x18	; 24
  e0:	80 83       	st	Z, r24
  e2:	e2 ec       	ldi	r30, 0xC2	; 194
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	8e 60       	ori	r24, 0x0E	; 14
  ea:	80 83       	st	Z, r24
  ec:	08 95       	ret

000000ee <uart_transmit>:
  ee:	e0 ec       	ldi	r30, 0xC0	; 192
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	90 81       	ld	r25, Z
  f4:	95 ff       	sbrs	r25, 5
  f6:	fd cf       	rjmp	.-6      	; 0xf2 <uart_transmit+0x4>
  f8:	80 93 c6 00 	sts	0x00C6, r24
  fc:	08 95       	ret

000000fe <uart_receive>:
  fe:	e0 ec       	ldi	r30, 0xC0	; 192
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	88 23       	and	r24, r24
 106:	ec f7       	brge	.-6      	; 0x102 <uart_receive+0x4>
 108:	80 91 c6 00 	lds	r24, 0x00C6
 10c:	08 95       	ret

0000010e <uart_msg_transmit>:

void uart_msg_transmit(int address, int payloadSize, t_msgType msgType, char* payload){
 10e:	ef 92       	push	r14
 110:	ff 92       	push	r15
 112:	0f 93       	push	r16
 114:	1f 93       	push	r17
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	8b 01       	movw	r16, r22
 11c:	79 01       	movw	r14, r18
    /* Construct meta packet */
    int meta_packet;
    int type;
    switch(msgType){
 11e:	44 23       	and	r20, r20
 120:	19 f0       	breq	.+6      	; 0x128 <uart_msg_transmit+0x1a>
 122:	41 30       	cpi	r20, 0x01	; 1
 124:	19 f0       	breq	.+6      	; 0x12c <uart_msg_transmit+0x1e>
 126:	19 c0       	rjmp	.+50     	; 0x15a <uart_msg_transmit+0x4c>
    case SENSOR :
        type = 0;
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	01 c0       	rjmp	.+2      	; 0x12e <uart_msg_transmit+0x20>
    	break;
    case MOTOR :
        type = 1;
 12c:	91 e0       	ldi	r25, 0x01	; 1
        break;
    default:
        return;
    }
    meta_packet = (address * 128) + (payloadSize * 16) + type;
 12e:	30 2f       	mov	r19, r16
 130:	28 e0       	ldi	r18, 0x08	; 8
 132:	82 9f       	mul	r24, r18
 134:	30 0d       	add	r19, r0
 136:	11 24       	eor	r1, r1

    /* Transmit meta packet */
    uart_transmit(meta_packet);
 138:	20 e1       	ldi	r18, 0x10	; 16
 13a:	32 9f       	mul	r19, r18
 13c:	90 0d       	add	r25, r0
 13e:	11 24       	eor	r1, r1
 140:	89 2f       	mov	r24, r25
 142:	d5 df       	rcall	.-86     	; 0xee <uart_transmit>

    /* Transmit payload */
    for(int i = 0; i < payloadSize; ++i){
 144:	10 16       	cp	r1, r16
 146:	11 06       	cpc	r1, r17
 148:	44 f4       	brge	.+16     	; 0x15a <uart_msg_transmit+0x4c>
 14a:	e7 01       	movw	r28, r14
 14c:	0e 0d       	add	r16, r14
 14e:	1f 1d       	adc	r17, r15
        uart_transmit(payload[i]);
 150:	89 91       	ld	r24, Y+
 152:	cd df       	rcall	.-102    	; 0xee <uart_transmit>

    /* Transmit meta packet */
    uart_transmit(meta_packet);

    /* Transmit payload */
    for(int i = 0; i < payloadSize; ++i){
 154:	c0 17       	cp	r28, r16
 156:	d1 07       	cpc	r29, r17
 158:	d9 f7       	brne	.-10     	; 0x150 <uart_msg_transmit+0x42>
        uart_transmit(payload[i]);
    }
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	1f 91       	pop	r17
 160:	0f 91       	pop	r16
 162:	ff 90       	pop	r15
 164:	ef 90       	pop	r14
 166:	08 95       	ret

00000168 <_exit>:
 168:	f8 94       	cli

0000016a <__stop_program>:
 16a:	ff cf       	rjmp	.-2      	; 0x16a <__stop_program>
